# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import motion_pb2 as motion__pb2


class MotionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MotionStreaming = channel.stream_stream(
                '/thesis.Motion/MotionStreaming',
                request_serializer=motion__pb2.RequestImage.SerializeToString,
                response_deserializer=motion__pb2.MotionResponse.FromString,
                )
        self.RegisterFaceIndexes = channel.unary_unary(
                '/thesis.Motion/RegisterFaceIndexes',
                request_serializer=motion__pb2.UserFormData.SerializeToString,
                response_deserializer=motion__pb2.UserFormData.FromString,
                )
        self.UpdateFaceIndexes = channel.unary_unary(
                '/thesis.Motion/UpdateFaceIndexes',
                request_serializer=motion__pb2.FaceIndexesConfirm.SerializeToString,
                response_deserializer=motion__pb2.FaceIndexesResponse.FromString,
                )
        self.FaceRecognizeStreaming = channel.stream_stream(
                '/thesis.Motion/FaceRecognizeStreaming',
                request_serializer=motion__pb2.RequestImage.SerializeToString,
                response_deserializer=motion__pb2.MotionResponse.FromString,
                )
        self.RequireFaceRecognizeRequest = channel.unary_unary(
                '/thesis.Motion/RequireFaceRecognizeRequest',
                request_serializer=motion__pb2.FaceRecognizeRequest.SerializeToString,
                response_deserializer=motion__pb2.FaceRecognizeResponse.FromString,
                )
        self.GetActivityRecentList = channel.unary_stream(
                '/thesis.Motion/GetActivityRecentList',
                request_serializer=motion__pb2.ActivityRecentRequest.SerializeToString,
                response_deserializer=motion__pb2.ActivityRecentResponse.FromString,
                )


class MotionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MotionStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterFaceIndexes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFaceIndexes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaceRecognizeStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequireFaceRecognizeRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActivityRecentList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MotionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MotionStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.MotionStreaming,
                    request_deserializer=motion__pb2.RequestImage.FromString,
                    response_serializer=motion__pb2.MotionResponse.SerializeToString,
            ),
            'RegisterFaceIndexes': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFaceIndexes,
                    request_deserializer=motion__pb2.UserFormData.FromString,
                    response_serializer=motion__pb2.UserFormData.SerializeToString,
            ),
            'UpdateFaceIndexes': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFaceIndexes,
                    request_deserializer=motion__pb2.FaceIndexesConfirm.FromString,
                    response_serializer=motion__pb2.FaceIndexesResponse.SerializeToString,
            ),
            'FaceRecognizeStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.FaceRecognizeStreaming,
                    request_deserializer=motion__pb2.RequestImage.FromString,
                    response_serializer=motion__pb2.MotionResponse.SerializeToString,
            ),
            'RequireFaceRecognizeRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.RequireFaceRecognizeRequest,
                    request_deserializer=motion__pb2.FaceRecognizeRequest.FromString,
                    response_serializer=motion__pb2.FaceRecognizeResponse.SerializeToString,
            ),
            'GetActivityRecentList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetActivityRecentList,
                    request_deserializer=motion__pb2.ActivityRecentRequest.FromString,
                    response_serializer=motion__pb2.ActivityRecentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'thesis.Motion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Motion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MotionStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/thesis.Motion/MotionStreaming',
            motion__pb2.RequestImage.SerializeToString,
            motion__pb2.MotionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterFaceIndexes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thesis.Motion/RegisterFaceIndexes',
            motion__pb2.UserFormData.SerializeToString,
            motion__pb2.UserFormData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFaceIndexes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thesis.Motion/UpdateFaceIndexes',
            motion__pb2.FaceIndexesConfirm.SerializeToString,
            motion__pb2.FaceIndexesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FaceRecognizeStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/thesis.Motion/FaceRecognizeStreaming',
            motion__pb2.RequestImage.SerializeToString,
            motion__pb2.MotionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequireFaceRecognizeRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thesis.Motion/RequireFaceRecognizeRequest',
            motion__pb2.FaceRecognizeRequest.SerializeToString,
            motion__pb2.FaceRecognizeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActivityRecentList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/thesis.Motion/GetActivityRecentList',
            motion__pb2.ActivityRecentRequest.SerializeToString,
            motion__pb2.ActivityRecentResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
